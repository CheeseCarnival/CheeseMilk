import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins{
    id 'java'
    id 'org.springframework.boot'
    id 'maven-publish'
}
//spring boot cloud and alibaba cloud version wiki:https://github.com/alibaba/spring-cloud-alibaba/wiki
ext{
    set("springCloudVersion", "2021.0.1")
    set("alibabaCloudVersion", "2021.0.1.0")
    set("springDataR2DBC", "Borca-RELEASE")
}
allprojects{
    group = 'com.cheeseocean'
    version = '1.0.0'

    repositories {
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        mavenLocal()
        maven {
            url = uri("https://maven.pkg.github.com/cheeseocean/CheesePackages")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'maven-publish'


    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
        testImplementation 'com.h2database:h2:1.4.200'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        implementation platform("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
        implementation platform(SpringBootPlugin.BOM_COORDINATES)
        implementation platform("com.alibaba.cloud:spring-cloud-alibaba-dependencies:${alibabaCloudVersion}")
        implementation platform("io.r2dbc:r2dbc-bom:${springDataR2DBC}")
        //Spring Session
        implementation 'org.springframework.session:spring-session-data-redis'
        implementation 'io.lettuce:lettuce-core:6.1.0.RELEASE'
        //Alibaba Nacos
        implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery'
        //Spring WebMvc
        implementation 'org.springframework.boot:spring-boot-starter-web'
        //Validation
        implementation 'org.springframework.boot:spring-boot-starter-validation'
    }

    task apiJar (type: Jar){
        from(sourceSets.main.output){
            include 'com/cheeseocean/*/api/**'
        }
    }

    task apiSourceJar(type: Jar){
        from(sourceSets.main.allSource){
            include 'com/cheeseocean/*/api/**'
        }
        archiveClassifier = 'sources'
    }

    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/cheeseocean/CheesePackages")
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                    password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
                }
            }
        }
        publications {
            gpr(MavenPublication) {
                artifactId "${project.name}-api"
                //using gradle module:publish -Dapi.version or edit in gradle.properties
                version System.getProperty("api.version") ?: project.findProperty("${project.name}.api.version")
                artifact apiJar
                artifact apiSourceJar
                pom {
                    name = "${project.name} API Jar"
                    description = "CheeseMilk API dependencies"
                    url = "http://github.com/cheeseocean/CheeseMilk"
                    licenses {
                        license {
                            name = "The Apache License, Version 2.0"
                            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        }
                    }
                    developers {
                        developer {
                            id = "xxxcrel"
                            name = "xxxcrel"
                            email = "crelxc@gmail.com"
                        }
                    }
                }
            }
        }
    }

    test {
        useJUnitPlatform()
    }

    bootJar {
        archiveFileName = "${project.name}.jar"
    }
}